 // Configurações e dados globais
// IMPORTANTE: Sistema opera APENAS com dados do banco de dados
// Cache localStorage foi removido para evitar dados falsos
const CONFIG = {
    adminEmail: 'adminganfi@gmail.com',
    adminPassword: 'ganfiadmin*'
};

// Estado da aplicação
let currentUser = null;
let clients = [];
let filteredClients = [];
let editingClient = null;

// Elementos DOM
const elements = {
    loginScreen: document.getElementById('loginScreen'),
    dashboard: document.getElementById('dashboard'),
    loginForm: document.getElementById('loginForm'),
    loginError: document.getElementById('loginError'),
    logoutBtn: document.getElementById('logoutBtn'),
    navBtns: document.querySelectorAll('.nav-btn'),
    sections: document.querySelectorAll('.dashboard-section'),
    searchClients: document.getElementById('searchClients'),
    addClientBtn: document.getElementById('addClientBtn'),
    clientModal: document.getElementById('clientModal'),
    clientForm: document.getElementById('clientForm'),
    closeModal: document.getElementById('closeModal'),
    cancelModal: document.getElementById('cancelModal'),
    confirmModal: document.getElementById('confirmModal'),
    cancelConfirm: document.getElementById('cancelConfirm'),
    confirmAction: document.getElementById('confirmAction'),
    addNumberBtn: document.getElementById('addNumberBtn'),
    numbersContainer: document.querySelector('.numbers-container'),
    clientsTableBody: document.getElementById('clientsTableBody'),
    modalTitle: document.getElementById('modalTitle'),
    confirmMessage: document.getElementById('confirmMessage')
};

// Funções utilitárias (precisam estar no topo)
function calculateNextDueDate(dueDay) {
    const today = new Date();
    const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, dueDay);
    return nextMonth;
}

function formatDateToBR(dateString) {
    if (!dateString || dateString === null) {
        return 'Data não configurada';
    }
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
        return 'Data inválida';
    }
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

function formatPhoneForDisplay(phoneNumber) {
    if (!phoneNumber || typeof phoneNumber !== 'string') {
        return '';
    }
    
    // Limpar o número
    let cleanNumber = phoneNumber.replace(/\D/g, '');
    
    // Se tem 13 dígitos, remover DDI 55 do Brasil
    if (cleanNumber.length === 13 && cleanNumber.startsWith('55')) {
        cleanNumber = cleanNumber.substring(2);
    }
    
    // Formatar como (XX) XXXXX-XXXX ou (XX) XXXX-XXXX
    if (cleanNumber.length >= 10) {
        const ddd = cleanNumber.substring(0, 2);
        const restOfNumber = cleanNumber.substring(2);
        
        if (restOfNumber.length === 9) {
            const formatted = restOfNumber.substring(0, 5) + '-' + restOfNumber.substring(5);
            return `(${ddd}) ${formatted}`;
        } else if (restOfNumber.length === 8) {
            const formatted = restOfNumber.substring(0, 4) + '-' + restOfNumber.substring(4);
            return `(${ddd}) ${formatted}`;
        }
    }
    
    // Se não conseguiu formatar, retornar como veio
    return phoneNumber;
}

// Event Listeners
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    setupEventListeners();
    
    // Limpar qualquer cache de clientes existente
    localStorage.removeItem('ganfi_clients_data');
    
    // Verificar se há usuário logado
    const loggedUser = localStorage.getItem('ganfi_logged_user');
    if (loggedUser) {
        showDashboard();
        // Carregar clientes do banco de dados
        try {
            await loadClientsFromDatabase();
            updateStatistics();
            renderClientsTable();
        } catch (error) {
            console.error('Falha ao carregar clientes:', error);
        }
    } else {
        showLogin();
    }
}

function setupEventListeners() {
    // Login
    elements.loginForm.addEventListener('submit', handleLogin);
    elements.logoutBtn.addEventListener('click', handleLogout);
    
    // Navegação
    elements.navBtns.forEach(btn => {
        btn.addEventListener('click', () => switchSection(btn.dataset.section));
    });
    
    // Busca
    elements.searchClients.addEventListener('input', handleSearch);
    
    // Modal do cliente
    elements.addClientBtn.addEventListener('click', () => openClientModal());
    elements.closeModal.addEventListener('click', closeClientModal);
    elements.cancelModal.addEventListener('click', closeClientModal);
    elements.clientForm.addEventListener('submit', handleClientSubmit);
    
    // Botão de atualizar dados
    const refreshBtn = document.getElementById('refreshDataBtn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', refreshClientsFromServer);
    }
    
    // Adicionar número
    elements.addNumberBtn.addEventListener('click', () => addNumberInput());
    
    // Modal de confirmação
    elements.cancelConfirm.addEventListener('click', closeConfirmModal);
    
    // Fechar modal clicando fora
    elements.clientModal.addEventListener('click', (e) => {
        if (e.target === elements.clientModal) closeClientModal();
    });
    
    elements.confirmModal.addEventListener('click', (e) => {
        if (e.target === elements.confirmModal) closeConfirmModal();
    });
}

// Autenticação
function handleLogin(e) {
    e.preventDefault();
    
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    
    if (email === CONFIG.adminEmail && password === CONFIG.adminPassword) {
        currentUser = { email: email };
        localStorage.setItem('ganfi_logged_user', JSON.stringify(currentUser));
        showDashboard();
        elements.loginError.style.display = 'none';
    } else {
        showLoginError('Email ou senha incorretos');
    }
}

function handleLogout() {
    currentUser = null;
    localStorage.removeItem('ganfi_logged_user');
    showLogin();
}

function showLogin() {
    elements.loginScreen.style.display = 'flex';
    elements.dashboard.style.display = 'none';
    clearLoginForm();
}

async function showDashboard() {
    elements.loginScreen.style.display = 'none';
    elements.dashboard.style.display = 'block';
    
    // Carregar clientes do banco de dados quando mostrar o dashboard
    try {
        await loadClientsFromDatabase();
        updateStatistics();
        renderClientsTable();
    } catch (error) {
        console.error('Erro ao carregar dados:', error);
        // Mostrar dados do cache se disponível
        updateStatistics();
        renderClientsTable();
    }
}

function showLoginError(message) {
    elements.loginError.textContent = message;
    elements.loginError.style.display = 'block';
}

function clearLoginForm() {
    elements.loginForm.reset();
    elements.loginError.style.display = 'none';
}

// Navegação entre seções
function switchSection(sectionName) {
    // Atualizar botões de navegação
    elements.navBtns.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.section === sectionName);
    });
    
    // Atualizar seções
    elements.sections.forEach(section => {
        section.classList.toggle('active', section.id === `${sectionName}Section`);
    });
}

// Gestão de clientes
async function loadClientsFromDatabase(silent = false) {
    try {
        showNotification('Carregando clientes...', 'info');
        
        const response = await fetch('https://requisicao.grupoganfi.com/webhook/0f8b0045-4bc7-40e0-b902-bd7d2d6c26cf', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'Ganfi-Admin/1.0'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const clientsFromDB = await response.json();
        
        // Converter formato do banco para formato interno
        clients = clientsFromDB.map(client => {
            // APENAS usar data_vencimento se existir no banco
            // Se for null ou não existir, deixar campos vazios
            let dueDate = null;
            let dueDay = null;
            
            if (client.data_vencimento && client.data_vencimento !== null) {
                dueDate = client.data_vencimento;
                dueDay = new Date(client.data_vencimento).getDate();
            }
            // Se não tem data_vencimento, deixa null - NÃO CALCULA NADA FALSO

            return {
                id: client.id_contato,
                name: client.nome,
                authorizedNumbers: client.numeros_autorizados || [],
                paymentStatus: client.status,
                dueDay: dueDay,
                dueDate: dueDate,
                createdAt: client.data_criacao,
                updatedAt: client.data_qualificacao
            };
        });
        
        filteredClients = [...clients];
        
        // Mostrar notificações apenas se necessário e não estiver em modo silencioso
        if (!silent) {
            if (clients.length === 0) {
                // Não mostrar notificação quando não há clientes - é normal
            } else {
                // Verificar se há clientes sem data de vencimento
                const clientsWithoutDueDate = clients.filter(c => !c.dueDate || c.dueDate === null);
                
                if (clientsWithoutDueDate.length > 0) {
                    showNotification(`${clients.length} clientes carregados. ATENÇÃO: ${clientsWithoutDueDate.length} sem data de vencimento!`, 'warning');
                } else {
                    showNotification(`${clients.length} clientes carregados diretamente do banco de dados!`, 'success');
                }
            }
        }
        
        return clients;
        
    } catch (error) {
        console.error('Erro ao carregar clientes do banco:', error);
        if (!silent) {
            showNotification('Erro ao conectar com o banco de dados', 'error');
        }
        
        // Sem fallback - só funciona com banco de dados
        clients = [];
        filteredClients = [];
        
        throw error;
    }
}

function updateStatistics() {
    const stats = {
        paid: clients.filter(c => c.paymentStatus === 'paid').length,
        pending: clients.filter(c => c.paymentStatus === 'pending').length,
        overdue: clients.filter(c => c.paymentStatus === 'overdue').length,
        total: clients.length
    };
    
    document.getElementById('paidClients').textContent = stats.paid;
    document.getElementById('pendingClients').textContent = stats.pending;
    document.getElementById('overdueClients').textContent = stats.overdue;
    document.getElementById('totalClients').textContent = stats.total;
}

function renderClientsTable() {
    const tbody = elements.clientsTableBody;
    tbody.innerHTML = '';
    
    if (filteredClients.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="5" style="text-align: center; padding: 40px; color: #7f8c8d;">
                    <i class="fas fa-users" style="font-size: 2rem; margin-bottom: 10px; display: block;"></i>
                    Nenhum cliente encontrado
                </td>
            </tr>
        `;
        return;
    }
    
    filteredClients.forEach(client => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <strong>${client.name}</strong>
            </td>
            <td>
                <div class="authorized-numbers">
                    ${client.authorizedNumbers.map(number => 
                        `<span class="number-tag">${formatPhoneForDisplay(number)}</span>`
                    ).join('')}
                </div>
            </td>
            <td>
                <span class="status-badge status-${client.paymentStatus}">
                    ${getStatusText(client.paymentStatus)}
                </span>
            </td>
            <td>
                <div class="due-info">
                    ${client.dueDay && client.dueDate ? 
                        `<strong>Dia ${client.dueDay} de cada mês</strong><br>
                         <small style="color: #7f8c8d;">Próximo: ${formatDateToBR(client.dueDate)}</small>
                         ${isOverdue(client.dueDate) ? '<br><small style="color: #e74c3c;">Vencimento passou</small>' : ''}` 
                        : 
                        `<strong style="color: #e74c3c;">SEM DATA DE VENCIMENTO</strong><br>
                         <small style="color: #e74c3c;">Configure no banco de dados</small>`
                    }
                </div>
            </td>
            <td>
                <div class="action-buttons">
                    <button class="btn-edit" onclick="editClient(${client.id})">
                        <i class="fas fa-edit"></i> Editar
                    </button>
                    ${client.dueDay && client.dueDate ? 
                        `<button class="btn-renew" onclick="renewClientPayment(${client.id})" title="Renovar por mais 1 mês">
                            <i class="fas fa-calendar-plus"></i> Renovar
                        </button>` 
                        : 
                        `<button class="btn-renew" disabled title="Sem data de vencimento configurada" style="opacity: 0.5; cursor: not-allowed;">
                            <i class="fas fa-calendar-plus"></i> Renovar
                        </button>`
                    }
                    <button class="btn-delete" onclick="confirmDeleteClient(${client.id})">
                        <i class="fas fa-trash"></i> Excluir
                    </button>
                </div>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function handleSearch() {
    const searchTerm = elements.searchClients.value.toLowerCase().trim();
    
    if (!searchTerm) {
        filteredClients = [...clients];
    } else {
        filteredClients = clients.filter(client => {
            return (
                client.name.toLowerCase().includes(searchTerm) ||
                client.authorizedNumbers.some(number => 
                    number.toLowerCase().includes(searchTerm)
                ) ||
                getStatusText(client.paymentStatus).toLowerCase().includes(searchTerm)
            );
        });
    }
    
    renderClientsTable();
}

// Modal do cliente
function openClientModal(client = null) {
    editingClient = client;
    
    if (client) {
        elements.modalTitle.textContent = 'Editar Cliente';
        populateClientForm(client);
    } else {
        elements.modalTitle.textContent = 'Novo Cliente';
        clearClientForm();
    }
    
    elements.clientModal.style.display = 'flex';
}

function closeClientModal() {
    elements.clientModal.style.display = 'none';
    editingClient = null;
    clearClientForm();
}

function populateClientForm(client) {
    document.getElementById('clientId').value = client.id;
    document.getElementById('clientName').value = client.name;
    document.getElementById('paymentStatus').value = client.paymentStatus;
    document.getElementById('dueDay').value = client.dueDay || '';
    
    // Limpar números existentes
    elements.numbersContainer.innerHTML = '';
    
    // Adicionar números do cliente  
    client.authorizedNumbers.forEach((number, index) => {
        if (!number || typeof number !== 'string') {
            addNumberInput('55', '', '', index === 0);
            return;
        }
        
        // Extrair DDI, DDD e número
        let ddi = '55'; // padrão Brasil
        let ddd = '';
        let phone = '';
        
        // Limpar o número removendo formatação
        let cleanNumber = number.replace(/\D/g, '');
        
        // Processar número completo DDI+DDD+NUMERO
        if (cleanNumber.length >= 10) {
            // Se tem 13 dígitos, extrair DDI
            if (cleanNumber.length === 13) {
                ddi = cleanNumber.substring(0, 2);
                ddd = cleanNumber.substring(2, 4);
                const restOfNumber = cleanNumber.substring(4);
                
                if (restOfNumber.length === 9) {
                    phone = restOfNumber.substring(0, 5) + '-' + restOfNumber.substring(5);
                } else if (restOfNumber.length === 8) {
                    phone = restOfNumber.substring(0, 4) + '-' + restOfNumber.substring(4);
                } else {
                    phone = restOfNumber;
                }
            }
            // Se tem 11 dígitos, assumir DDD+NUMERO (sem DDI)
            else if (cleanNumber.length === 11) {
                ddi = '55';
                ddd = cleanNumber.substring(0, 2);
                const restOfNumber = cleanNumber.substring(2);
                
                if (restOfNumber.length === 9) {
                    phone = restOfNumber.substring(0, 5) + '-' + restOfNumber.substring(5);
                } else {
                    phone = restOfNumber;
                }
            }
            // Se tem 10 dígitos, assumir DDD+NUMERO (8 dígitos)
            else if (cleanNumber.length === 10) {
                ddi = '55';
                ddd = cleanNumber.substring(0, 2);
                const restOfNumber = cleanNumber.substring(2);
                phone = restOfNumber.substring(0, 4) + '-' + restOfNumber.substring(4);
            }
        } else {
            // Fallback para formato já formatado (XX) XXXXX-XXXX
            let match = number.match(/\((\d{2})\)\s*(.+)/);
            if (match) {
                ddi = '55';
                ddd = match[1];
                phone = match[2].trim();
            }
        }
        
        addNumberInput(ddi, ddd, phone, index === 0);
    });
    
    // Se não houver números, adicionar um campo vazio
    if (client.authorizedNumbers.length === 0) {
        addNumberInput();
    }
}

function clearClientForm() {
    elements.clientForm.reset();
    
    // Limpar números e adicionar um campo vazio
    elements.numbersContainer.innerHTML = '';
    addNumberInput();
}

function addNumberInput(ddiValue = '55', dddValue = '', phoneValue = '', isFirst = false) {
    const inputGroup = document.createElement('div');
    inputGroup.className = 'number-input-group';
    
    // Criar elementos diretamente
    const phoneInputsDiv = document.createElement('div');
    phoneInputsDiv.className = 'phone-inputs';
    
    const ddiInput = document.createElement('input');
    ddiInput.type = 'text';
    ddiInput.className = 'ddi-input';
    ddiInput.placeholder = '55';
    ddiInput.maxLength = 3;
    ddiInput.value = ddiValue;
    
    const dddInput = document.createElement('input');
    dddInput.type = 'text';
    dddInput.className = 'ddd-input';
    dddInput.placeholder = '11';
    dddInput.maxLength = 2;
    dddInput.value = dddValue;
    
    const phoneInput = document.createElement('input');
    phoneInput.type = 'text';
    phoneInput.className = 'phone-input';
    phoneInput.placeholder = '99999-9999';
    phoneInput.maxLength = 10;
    phoneInput.value = phoneValue;
    
    const removeBtn = document.createElement('button');
    removeBtn.type = 'button';
    removeBtn.className = 'btn-remove-number';
    if (isFirst) removeBtn.style.display = 'none';
    removeBtn.innerHTML = '<i class="fas fa-trash"></i>';
    
    // Montar estrutura
    phoneInputsDiv.appendChild(ddiInput);
    phoneInputsDiv.appendChild(dddInput);
    phoneInputsDiv.appendChild(phoneInput);
    inputGroup.appendChild(phoneInputsDiv);
    inputGroup.appendChild(removeBtn);
    
    // Adicionar eventos
    ddiInput.addEventListener('input', applyDDIMask);
    dddInput.addEventListener('input', applyDDDMask);
    phoneInput.addEventListener('input', applyPhoneMask);
    
    removeBtn.addEventListener('click', () => {
        inputGroup.remove();
        updateRemoveButtons();
    });
    
    elements.numbersContainer.appendChild(inputGroup);
    updateRemoveButtons();
}

function updateRemoveButtons() {
    const inputGroups = elements.numbersContainer.querySelectorAll('.number-input-group');
    inputGroups.forEach((group, index) => {
        const removeBtn = group.querySelector('.btn-remove-number');
        if (inputGroups.length === 1) {
            removeBtn.style.display = 'none';
        } else {
            removeBtn.style.display = 'block';
        }
    });
}

function applyDDIMask(e) {
    let value = e.target.value.replace(/\D/g, '');
    if (value.length > 3) {
        value = value.substring(0, 3);
    }
    // Se vazio, colocar 55 como padrão
    if (value === '') {
        value = '55';
    }
    e.target.value = value;
}

function applyDDDMask(e) {
    let value = e.target.value.replace(/\D/g, '');
    if (value.length > 2) {
        value = value.substring(0, 2);
    }
    e.target.value = value;
}

function applyPhoneMask(e) {
    let value = e.target.value.replace(/\D/g, '');
    
    // Limitar a 9 dígitos
    if (value.length > 9) {
        value = value.substring(0, 9);
    }
    
    if (value.length <= 9) {
        if (value.length <= 4) {
            // Não adicionar hífen ainda
            e.target.value = value;
        } else if (value.length <= 8) {
            // Formato: 9999-9999 (8 dígitos)
            e.target.value = value.replace(/(\d{4})(\d{0,4})/, '$1-$2');
        } else {
            // Formato: 99999-9999 (9 dígitos)
            e.target.value = value.replace(/(\d{5})(\d{0,4})/, '$1-$2');
        }
    }
}

function handleClientSubmit(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const phoneInputGroups = elements.numbersContainer.querySelectorAll('.number-input-group');
    const authorizedNumbers = [];
    
    phoneInputGroups.forEach(group => {
        const ddiInput = group.querySelector('.ddi-input');
        const dddInput = group.querySelector('.ddd-input');
        const phoneInput = group.querySelector('.phone-input');
        const ddi = ddiInput.value.trim();
        const ddd = dddInput.value.trim();
        const phone = phoneInput.value.trim();
        
        if (ddi && ddd && phone) {
            // Validar DDI
            if (ddi.length < 1 || ddi.length > 3) {
                alert('DDI deve ter 1 a 3 dígitos');
                ddiInput.focus();
                return;
            }
            
            // Validar DDD
            if (ddd.length !== 2) {
                alert('DDD deve ter 2 dígitos');
                dddInput.focus();
                return;
            }
            
            // Validar telefone
            const phoneClean = phone.replace(/\D/g, '');
            if (phoneClean.length < 8 || phoneClean.length > 9) {
                alert('Número de telefone deve ter 8 ou 9 dígitos');
                phoneInput.focus();
                return;
            }
            
            // Montar número completo: DDI + DDD + NUMERO (formato interno para processamento)
            authorizedNumbers.push(`${ddi}${ddd}${phoneClean}`);
        }
    });
    
    if (authorizedNumbers.length === 0) {
        alert('É necessário adicionar pelo menos um número autorizado');
        return;
    }
    
    const dueDayValue = document.getElementById('dueDay').value;
    const dueDay = dueDayValue ? parseInt(dueDayValue) : null;
    
    const clientData = {
        name: document.getElementById('clientName').value.trim(),
        authorizedNumbers: authorizedNumbers,
        paymentStatus: document.getElementById('paymentStatus').value,
        dueDay: dueDay,
        dueDate: dueDay ? calculateNextDueDate(dueDay).toISOString() : null
    };
    
    if (editingClient) {
        updateClient(editingClient.id, clientData);
    } else {
        createClient(clientData);
    }
    
    closeClientModal();
}

async function createClient(clientData) {
    const newClient = {
        id: Date.now(),
        ...clientData,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    // Enviar webhook para novo cliente
    await sendWebhook(newClient, 'novo_cliente');
    
        // Recarregar dados do servidor após criar
        setTimeout(async () => {
            await refreshClientsFromServer(true); // silencioso
        }, 1000);    showNotification('Cliente criado com sucesso!', 'success');
}

async function updateClient(clientId, clientData) {
    const clientIndex = clients.findIndex(c => c.id === clientId);
    if (clientIndex !== -1) {
        const updatedClient = {
            ...clients[clientIndex],
            ...clientData,
            updatedAt: new Date().toISOString()
        };
        
        // Enviar webhook para cliente atualizado
        await sendWebhook(updatedClient, 'cliente_atualizado');
        
        // Recarregar dados do servidor após atualizar
        setTimeout(async () => {
            await refreshClientsFromServer(true); // silencioso
        }, 1000);
        
        showNotification('Cliente atualizado com sucesso!', 'success');
    }
}

function editClient(clientId) {
    const client = clients.find(c => c.id === clientId);
    if (client) {
        openClientModal(client);
    }
}

function confirmDeleteClient(clientId) {
    const client = clients.find(c => c.id === clientId);
    if (client) {
        elements.confirmMessage.textContent = 
            `Tem certeza que deseja excluir o cliente "${client.name}"? Esta ação não pode ser desfeita.`;
        
        elements.confirmAction.onclick = () => {
            deleteClient(clientId);
            closeConfirmModal();
        };
        
        elements.confirmModal.style.display = 'flex';
    }
}

async function deleteClient(clientId) {
    const clientIndex = clients.findIndex(c => c.id === clientId);
    if (clientIndex !== -1) {
        const clientToDelete = clients[clientIndex];
        
        // Enviar webhook antes de excluir
        await sendWebhook(clientToDelete, 'cliente_excluido');
        
        // Recarregar dados do servidor após excluir
        setTimeout(async () => {
            await refreshClientsFromServer(true); // silencioso
        }, 1000);
        
        showNotification('Cliente excluído com sucesso!', 'success');
    }
}

function closeConfirmModal() {
    elements.confirmModal.style.display = 'none';
}

// Utilitários
function getStatusText(status) {
    const statusMap = {
        'paid': 'Pagamento em Dia',
        'pending': 'Pagamento Pendente',
        'overdue': 'Pagamento Atrasado'
    };
    return statusMap[status] || status;
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR');
}

function isOverdue(dateString) {
    if (!dateString || dateString === null) {
        return false; // Se não tem data, não pode estar vencido
    }
    const today = new Date();
    const dueDate = new Date(dateString);
    if (isNaN(dueDate.getTime())) {
        return false; // Data inválida não é vencida
    }
    today.setHours(0, 0, 0, 0);
    dueDate.setHours(0, 0, 0, 0);
    return dueDate < today;
}

function isDueThisMonth(dueDay) {
    const today = new Date();
    const currentDay = today.getDate();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    // Verificar se o dia de vencimento ainda não passou este mês
    return currentDay < dueDay;
}

function isOverdueThisMonth(dueDay) {
    const today = new Date();
    const currentDay = today.getDate();
    
    // Se o dia atual é maior que o dia de vencimento, está atrasado
    return currentDay > dueDay;
}

function extractDayFromDate(dateString) {
    if (!dateString) return null;
    const date = new Date(dateString);
    return date.getDate();
}

// Função para recarregar dados do servidor
async function refreshClientsFromServer(silent = false) {
    try {
        await loadClientsFromDatabase(silent);
        updateStatistics();
        renderClientsTable();
        if (!silent) {
            showNotification('Dados atualizados!', 'success');
        }
    } catch (error) {
        if (!silent) {
            showNotification('Erro ao atualizar dados', 'warning');
        }
    }
}

function showNotification(message, type = 'info') {
    // Criar elemento de notificação
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'warning' ? 'fa-exclamation-triangle' : 'fa-info-circle'}"></i>
        <span>${message}</span>
    `;
    
    // Adicionar estilos
    const bgColor = type === 'success' ? '#27ae60' : type === 'warning' ? '#f39c12' : '#3498db';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${bgColor};
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        z-index: 2000;
        display: flex;
        align-items: center;
        gap: 10px;
        animation: slideIn 0.3s ease;
    `;
    
    // Adicionar ao DOM
    document.body.appendChild(notification);
    
    // Remover após 3 segundos
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// Adicionar estilos de animação para notificações
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);



// Função para renovar vencimento do cliente (adicionar 1 mês)
async function renewClientPayment(clientId) {
    try {
        const client = clients.find(c => c.id === clientId);
        if (!client) return;

        // Verificar se cliente tem data de vencimento válida
        if (!client.dueDate || client.dueDate === null) {
            showNotification('ERRO: Cliente não tem data de vencimento configurada no banco!', 'error');
            return;
        }

        // Calcular nova data de vencimento (adicionar 1 mês)
        const currentDueDate = new Date(client.dueDate);
        const newDueDate = new Date(currentDueDate.getFullYear(), currentDueDate.getMonth() + 1, currentDueDate.getDate());
        
        // Atualizar cliente
        client.dueDate = newDueDate.toISOString();
        client.dueDay = newDueDate.getDate();

        // Enviar para API (formato correto da função sendWebhook)
        await sendWebhook(client, 'cliente_atualizado');

        showNotification('Vencimento renovado com sucesso!', 'success');
        
        // Recarregar dados após 1 segundo
        setTimeout(async () => {
            await refreshClientsFromServer(true); // silencioso
        }, 1000);

    } catch (error) {
        console.error('Erro ao renovar vencimento:', error);
        showNotification('Erro ao renovar vencimento', 'error');
    }
}

// Auto-refresh dos dados a cada 30 segundos
setInterval(async () => {
    const loggedUser = localStorage.getItem('ganfi_logged_user');
    if (loggedUser && elements.dashboard.style.display !== 'none') {
        try {
            await loadClientsFromDatabase(true); // modo silencioso
            updateStatistics();
            renderClientsTable();
        } catch (error) {
            console.log('Auto-refresh falhou:', error);
        }
    }
}, 30000); // 30 segundos

// Função para enviar webhook
async function sendWebhook(clientData, evento) {
    const webhookUrl = 'https://requisicao.grupoganfi.com/webhook/50e63045-e679-4ad3-b496-a6700f4c9917';
    
    // Converter números para formato API: 5511999999999
    const numerosFormatados = clientData.authorizedNumbers.map(numero => {
        // Remove parênteses, espaços e hífens, mantendo apenas números
        let numeroLimpo = numero.replace(/[^\d]/g, '');
        
        // Se já tem DDI 55, usar como está
        if (numeroLimpo.length === 13 && numeroLimpo.startsWith('55')) {
            return numeroLimpo;
        }
        
        // Se não tem DDI, adicionar 55 + DDD + número
        if (numeroLimpo.length >= 10) {
            return '55' + numeroLimpo;
        }
        
        // Fallback para casos inesperados
        return numeroLimpo;
    });
    
    const payload = {
        evento: evento,
        cliente: {
            id: clientData.id,
            nome: clientData.name,
            numerosAutorizados: numerosFormatados,
            statusPagamento: clientData.paymentStatus,
            diaVencimento: clientData.dueDay,
            dataVencimento: clientData.dueDate,
            criadoEm: clientData.createdAt,
            atualizadoEm: clientData.updatedAt || null
        },
        timestamp: new Date().toISOString(),
        origem: 'ganfi-admin-web'
    };
    
    try {
        const response = await fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'Ganfi-Admin/1.0'
            },
            body: JSON.stringify(payload)
        });
        
        if (response.ok) {
            console.log('Webhook enviado com sucesso:', evento, clientData.name);
            return true;
        } else {
            console.error('Erro ao enviar webhook:', response.status, response.statusText);
            showNotification('⚠️ Erro ao sincronizar dados', 'warning');
            return false;
        }
    } catch (error) {
        console.error('Erro na requisição do webhook:', error);
        showNotification('⚠️ Erro de conexão na sincronização', 'warning');
    }
}